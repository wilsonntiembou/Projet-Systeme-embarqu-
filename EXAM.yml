# Initialiser les variables
nbMoteurs = 0
nbRoues = 0
huile = 50
nbHuilesPompe1 = 10
nbHuilesPompe2 = 20
nbHuilesReqMachine1 = 25
nbHuilesReqMachine2 = 5

# Définir une liste de tâches
tasks = []
tasks.append(("Pompe 1", 5, 2, nbHuilesPompe1))
tasks.append(("Pompe 2", 15, 3, nbHuilesPompe2))
tasks.append(("Machine 1", 5, 5, nbHuilesReqMachine1))
tasks.append(("Machine 2", 5, 3, nbHuilesReqMachine2))

# Boucle pour traiter les tâches
while tasks:
    # Rechercher la tâche la plus prioritaire
    task = None
    for t in tasks:
        if huile >= t[3] and (task is None or t[1]/4 > nbMoteurs and t[1]/4 < nbRoues):
            task = t

    # Si aucune tâche n'est disponible, sortir de la boucle
    if task is None:
        break

    # Exécuter la tâche
    task_name, _, task_execution_time, task_huile = task
    if task_name == "Pompe 1":
        huile += nbHuilesPompe1
    elif task_name == "Pompe 2":
        huile += nbHuilesPompe2
    elif task_name == "Machine 1":
        huile -= nbHuilesReqMachine1
        nbMoteurs += 1
    elif task_name == "Machine 2":
        huile -= nbHuilesReqMachine2
        nbRoues += 1

    # Supprimer la tâche de la liste
    tasks.remove(task)
     # Vérifier si le réservoir est plein
    if huile >= 50:
        # Si le réservoir est plein, donner une faible priorité aux pompes
        for i in range(len(tasks)):
            if tasks[i][0].startswith("Pompe"):
                tasks[i] = (tasks[i][0], 100, tasks[i][2], tasks[i][3])

    # Vérifier si nbRoues / 4 > nbMoteurs
    if nbRoues / 4 > nbMoteurs:
        # Si oui, donner une priorité plus élevée à Machine 1
        for i in range(len(tasks)):
            if tasks[i][0] == "Machine 1":
                tasks[i] = (tasks[i][0], 1, tasks[i][2], tasks[i][3])

    # Vérifier si nbRoues / 4 < nbMoteurs
    if nbRoues / 4 < nbMoteurs:
        # Si oui, donner une haute priorité à Machine 2
        for i in range(len(tasks)):
            if tasks[i][0] == "Machine 2":
                tasks[i] = (tasks[i][0], 1, tasks[i][2], tasks[i][3])
